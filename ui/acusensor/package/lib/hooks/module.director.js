"use strict";function _slicedToArray(r,t){return _arrayWithHoles(r)||_iterableToArrayLimit(r,t)||_unsupportedIterableToArray(r,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(r,t){if(r){if("string"==typeof r)return _arrayLikeToArray(r,t);var e={}.toString.call(r).slice(8,-1);return"Object"===e&&r.constructor&&(e=r.constructor.name),"Map"===e||"Set"===e?Array.from(r):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?_arrayLikeToArray(r,t):void 0}}function _arrayLikeToArray(r,t){(null==t||t>r.length)&&(t=r.length);for(var e=0,o=Array(t);e<t;e++)o[e]=r[e];return o}function _iterableToArrayLimit(r,t){var e=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=e){var o,n,a,i,u=[],l=!0,s=!1;try{if(a=(e=e.call(r)).next,0===t){if(Object(e)!==e)return;l=!1}else for(;!(l=(o=a.call(e)).done)&&(u.push(o.value),u.length!==t);l=!0);}catch(r){s=!0,n=r}finally{try{if(!l&&null!=e.return&&(i=e.return(),Object(i)!==i))return}finally{if(s)throw n}}return u}}function _arrayWithHoles(r){if(Array.isArray(r))return r}const framework="path-to-regexp";module.exports.hook="route",module.exports.packageNames=["director"],module.exports.load=({onBeforeRequire:r,require:t,report:e,proxyMethod:o})=>{r("director",(()=>{const r=t("director");o(r.http.Router.prototype,"on",(({args:r,stack:t})=>{const o=_slicedToArray(r,3),n=o[0],a=o[1];return"function"==typeof o[2]&&("string"==typeof n&&void("string"==typeof a?e({route:a,method:n.toUpperCase(),framework:framework},t):a instanceof RegExp&&e({route:a.toString(),method:n.toUpperCase(),framework:"regex"},t)))})),o(r.http.Router.prototype,"mount",(({args:r,stack:t})=>{const o=r[0];for(let r in o){if("string"!=typeof r||!r.startsWith("/"))continue;const n=o[r];Object.keys(n).forEach((o=>{const n=o.toUpperCase();e({route:r,framework:framework,method:n},t)}))}}))}))};