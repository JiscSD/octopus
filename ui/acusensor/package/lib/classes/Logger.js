"use strict";const EventEmitter=require("events"),zeroPad=e=>e.length<2?"0"+e:e,output=Object.freeze({stdout:{full:({time:e,level:t,name:r,message:s})=>{process.stdout.write(`${e}\t${t}\t${r}\t${Logger.getWritableString(s)}\r\n`)},minimal:({level:e,name:t,message:r})=>{process.stdout.write(`${e}\t${t}\t${Logger.getWritableString(r)}\r\n`)}},file:e=>{const t=require("fs").createWriteStream(e,{flags:"a"});return{full:({time:e,level:r,name:s,message:i})=>{t.write(`${e}\t${r}\t${s}\t${Logger.getWritableString(i)}\r\n`)}}}}),LogLevel=Object.freeze({DEBUG:0,INFO:1,WARN:2,ERROR:3});class Logger extends EventEmitter{constructor(e){super(),this._name=e,this._outputLevel="number"==typeof LogLevel[process.env.ACXLOGLEVEL]?LogLevel[process.env.ACXLOGLEVEL]:LogLevel.DEBUG}static getWritableString(e){const t=[];return e.forEach((e=>{"string"==typeof e?t.push(e):e instanceof Array?t.push(Logger.getWritableString(e)):t.push(JSON.stringify(e))})),t.join(", ").replace(/(?:\r\n|\r|\n)/g," ")}_getTime(){const e=new Date;let t="";return t+=e.getFullYear()+"-",t+=zeroPad(e.getMonth()+1+"")+"-",t+=zeroPad(e.getDate()+""),t+="T",t+=zeroPad(e.getHours()+"")+":",t+=zeroPad(e.getMinutes()+"")+":",t+=zeroPad(e.getSeconds()+""),t+=".",t+=(e.getTime()+"").substr(10),t}_emitMessage(e,...t){if(LogLevel[e]>=this._outputLevel){this._prefix&&(t=[prefix].concat(t));const r={time:this._getTime(),level:e,name:this._name,pid:process.pid,message:t};this.emit("message",r)}}getSubLogger(e){const t=this,r=new Logger(e);return r.on("message",(function(e){t.emit("message",e)})),r}info(...e){this._emitMessage.apply(this,["INFO",e])}error(...e){this._emitMessage.apply(this,["ERROR",e])}debug(...e){this._emitMessage.apply(this,["DEBUG",e])}warn(...e){this._emitMessage.apply(this,["WARN",e])}}Logger.prototype.output=output,exports.logger=function(e){return new Logger(e)};