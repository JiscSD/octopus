org: jiscacuk

service: octopus-api

frameworkVersion: '4'

functions:
    # App
    healthcheck:
        handler: dist/src/components/application/routes.healthcheck
        events:
            - http:
                path: ${self:custom.versions.v1}/healthcheck
                method: GET
                cors: true
    seedOpenSearch:
        handler: dist/src/lib/testUtils.openSearchSeed
    # Publications
    getPublication:
        handler: dist/src/components/publication/routes.get
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}
                method: GET
                cors: true
    getSeedDataPublications:
        handler: dist/src/components/publication/routes.getSeedDataPublications
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/seed-data-publications
                method: GET
                cors: true
    createPublication:
        handler: dist/src/components/publication/routes.create
        events:
            - http:
                path: ${self:custom.versions.v1}/publications
                method: POST
                cors: true
    getPublicationLinks:
        handler: dist/src/components/publication/routes.getPublicationLinks
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}/links
                method: GET
                cors: true
    getPDF:
        handler: dist/src/components/pdf/routes.getPublicationPDF
        architecture: x86_64
        memorySize: 2048 # https://github.com/alixaxel/chrome-aws-lambda#:~:text=You%20should%20allocate%20at%20least%20512%20MB%20of%20RAM%20to%20your%20Lambda%2C%20however%201600%20MB%20(or%20more)%20is%20recommended
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}/pdf
                method: GET
                cors: true
        package:
            individually: true
            patterns: ${file(./serverless-config-default.yml):package.pdfFunctionPatterns}
    # Publication Versions
    createPublicationVersion:
        handler: dist/src/components/publicationVersion/routes.create
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}/publication-versions
                method: POST
                cors: true
    getPublicationVersion:
        handler: dist/src/components/publicationVersion/routes.get
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}/publication-versions/{version} # {version} can be a version id, number, "latest" or "latestLive"
                method: GET
                cors: true
    getIndexedPublicationVersions:
        handler: dist/src/components/publicationVersion/routes.getAll
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions
                method: GET
                cors: true
    updatePublicationVersion:
        handler: dist/src/components/publicationVersion/routes.update
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}
                method: PATCH
                cors: true
    updateStatus:
        handler: dist/src/components/publicationVersion/routes.updateStatus
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/status/{status}
                method: PUT
                cors: true
    deleteVersion:
        handler: dist/src/components/publicationVersion/routes.deleteVersion
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}
                method: DELETE
                cors: true
    requestControl:
        handler: dist/src/components/publicationVersion/routes.requestControl
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}/publication-versions/{version}/request-control
                method: GET
                cors: true
    approveControlRequest:
        handler: dist/src/components/publicationVersion/routes.approveControlRequest
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}/publication-versions/{version}/approve-control-request
                method: POST
                cors: true
    # Users
    getUsers:
        handler: dist/src/components/user/routes.getAll
        events:
            - http:
                path: ${self:custom.versions.v1}/users
                method: GET
                cors: true
    getUser:
        handler: dist/src/components/user/routes.get
        events:
            - http:
                path: ${self:custom.versions.v1}/users/{id}
                method: GET
                cors: true
    getUserPublications:
        handler: dist/src/components/user/routes.getPublications
        events:
            - http:
                path: ${self:custom.versions.v1}/users/{id}/publications
                method: GET
                cors: true
    getUserList:
        handler: dist/src/components/user/routes.getUserList
        events:
            - http:
                path: ${self:custom.versions.v1}/user-list
                method: GET
                cors: true
    getUserControlRequests:
        handler: dist/src/components/user/routes.getUserControlRequests
        events:
            - http:
                path: ${self:custom.versions.v1}/users/me/control-requests
                method: GET
                cors: true
    # Auth
    authorization:
        handler: dist/src/components/authorization/routes.authorize
        events:
            - http:
                path: ${self:custom.versions.v1}/authorization
                method: POST
                cors: true
    getDecodedUserToken:
        handler: dist/src/components/authorization/routes.getDecodedUserToken
        events:
            - http:
                path: ${self:custom.versions.v1}/decode-user-token
                method: GET
                cors: true
    verifyOrcidAccess:
        handler: dist/src/components/authorization/routes.verifyOrcidAccess
        events:
            - http:
                path: ${self:custom.versions.v1}/verify-orcid-access
                method: GET
                cors: true
    revokeOrcidAccess:
        handler: dist/src/components/authorization/routes.revokeOrcidAccess
        events:
            - http:
                path: ${self:custom.versions.v1}/revoke-orcid-access
                method: DELETE
                cors: true
    # Links
    createLink:
        handler: dist/src/components/link/routes.create
        events:
            - http:
                path: ${self:custom.versions.v1}/links
                method: POST
                cors: true
    deleteLink:
        handler: dist/src/components/link/routes.deleteLink
        events:
            - http:
                path: ${self:custom.versions.v1}/links/{id}
                method: DELETE
                cors: true
    markLinkForDeletion:
        handler: dist/src/components/link/routes.markForDeletion
        events:
            - http:
                path: ${self:custom.versions.v1}/links/{id}/mark-for-deletion
                method: POST
                cors: true
    # CoAuthors
    getCoAuthors:
        handler: dist/src/components/coauthor/routes.getAll
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/coauthors
                method: GET
                cors: true
    updateAll:
        handler: dist/src/components/coauthor/routes.updateAll
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/coauthors
                method: PUT
                cors: true
    deleteCoAuthor:
        handler: dist/src/components/coauthor/routes.remove
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/coauthors/{coAuthorId}
                method: DELETE
                cors: true
    linkCoAuthor:
        handler: dist/src/components/coauthor/routes.link
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/link-coauthor
                method: PATCH
                cors: true
    updateCoAuthor:
        handler: dist/src/components/coauthor/routes.updateCoAuthor
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/coauthors/{coAuthorId}
                method: PATCH
                cors: true
    requestApproval:
        handler: dist/src/components/coauthor/routes.requestApproval
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/coauthors/request-approval
                method: PUT
                cors: true
    sendApprovalReminder:
        handler: dist/src/components/coauthor/routes.sendApprovalReminder
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/coauthors/{coAuthorId}/approval-reminder
                method: POST
                cors: true
    # Flags
    getFlag:
        handler: dist/src/components/flag/routes.get
        events:
            - http:
                path: ${self:custom.versions.v1}/flags/{id}
                method: GET
                cors: true
    createFlag:
        handler: dist/src/components/flag/routes.createFlag
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}/flags
                method: POST
                cors: true
    createFlagComment:
        handler: dist/src/components/flag/routes.createFlagComment
        events:
            - http:
                path: ${self:custom.versions.v1}/flags/{id}/comment
                method: POST
                cors: true
    resolveFlag:
        handler: dist/src/components/flag/routes.resolveFlag
        events:
            - http:
                path: ${self:custom.versions.v1}/flags/{id}/resolve
                method: POST
                cors: true
    getPublicationFlags:
        handler: dist/src/components/flag/routes.getPublicationFlags
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}/flags
                method: GET
                cors: true
    getUserFlags:
        handler: dist/src/components/flag/routes.getUserFlags
        events:
            - http:
                path: ${self:custom.versions.v1}/users/{id}/flags
                method: GET
                cors: true
    # Images
    createImage:
        handler: dist/src/components/image/routes.create
        events:
            - http:
                path: ${self:custom.versions.v1}/images
                method: POST
                cors: true
    deleteImage:
        handler: dist/src/components/image/routes.destroy
        events:
            - http:
                path: ${self:custom.versions.v1}/images/{id}
                method: DELETE
                cors: true
    getAllImages:
        handler: dist/src/components/image/routes.getAll
        events:
            - http:
                path: ${self:custom.versions.v1}/images
                method: GET
                cors: true
    # Bookmarks
    createBookmark:
        handler: dist/src/components/bookmark/routes.create
        events:
            - http:
                path: ${self:custom.versions.v1}/bookmarks
                method: POST
                cors: true
    deleteBookmark:
        handler: dist/src/components/bookmark/routes.deleteBookmark
        events:
            - http:
                path: ${self:custom.versions.v1}/bookmarks/{id}
                method: DELETE
                cors: true
    getAllBookmarks:
        handler: dist/src/components/bookmark/routes.getAll
        events:
            - http:
                path: ${self:custom.versions.v1}/bookmarks
                method: GET
                cors: true
    # Notifications
    getAll:
        handler: dist/src/components/notification/routes.getAll
        events:
            - http:
                path: ${self:custom.versions.v1}/notifications
                method: GET
                cors: true
    sendBulletin:
        handler: dist/src/components/notification/routes.sendBulletin
        events:
            - schedule: cron(0 10 ? * MON *) # Every Monday at 10
            - http:
                path: ${self:custom.versions.v1}/notifications/bulletin
                method: POST
                cors: true
            
    # Verification
    requestVerification:
        handler: dist/src/components/verification/routes.requestCode
        events:
            - http:
                path: ${self:custom.versions.v1}/verification/{id}
                method: GET
                cors: true
    confirmVerification:
        handler: dist/src/components/verification/routes.confirmCode
        events:
            - http:
                path: ${self:custom.versions.v1}/verification/{id}
                method: POST
                cors: true
    # Funders
    createFunder:
        handler: dist/src/components/funder/routes.create
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/funders
                method: POST
                cors: true
    deleteFunder:
        handler: dist/src/components/funder/routes.destroy
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/funders/{funderId}
                method: DELETE
                cors: true
    # References
    getReferences:
        handler: dist/src/components/reference/routes.get
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/references
                method: get
                cors: true
    updateAllReference:
        handler: dist/src/components/reference/routes.updateAll
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/references
                method: put
                cors: true
    # Affiliations
    getORCIDAffiliations:
        handler: dist/src/components/affiliations/routes.getORCIDAffiliations
        events:
            - http:
                path: ${self:custom.versions.v1}/orcid-affiliations
                method: GET
                cors: true
    # Topics
    getTopic:
        handler: dist/src/components/topic/routes.get
        events:
            - http:
                path: ${self:custom.versions.v1}/topics/{id}
                method: GET
                cors: true
    getTopics:
        handler: dist/src/components/topic/routes.getTopics
        events:
            - http:
                path: ${self:custom.versions.v1}/topics
                method: GET
                cors: true
    # Events
    dailyEventCheck:
        handler: dist/src/components/event/routes.dailyEventCheck
        events:
            - schedule: cron(0 8 * * ? *) # Every day at 8 a.m.
    # Additional Information
    createAdditionalInformation:
        handler: dist/src/components/additionalInformation/routes.create
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/additional-information
                method: POST
                cors: true
    deleteAdditionalInformation:
        handler: dist/src/components/additionalInformation/routes.deleteAdditionalInformation
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-versions/{publicationVersionId}/additional-information/{additionalInformationId}
                method: DELETE
                cors: true
    # Sitemaps
    generateSitemaps:
        handler: dist/src/components/sitemap/routes.generate
        events:
            - schedule: cron(0 5 ? * * *) # Every day at 5 a.m.

    getSitemapPaths:
        handler: dist/src/components/sitemap/routes.getPaths
        events:
            - http:
                path: ${self:custom.versions.v1}/sitemaps/paths
                method: GET
                cors: true

    # Crosslinks
    createCrosslink:
        handler: dist/src/components/crosslink/routes.create
        events:
            - http:
                path: ${self:custom.versions.v1}/crosslinks
                method: POST
                cors: true
    deleteCrosslink:
        handler: dist/src/components/crosslink/routes.deleteCrosslink
        events:
            - http:
                path: ${self:custom.versions.v1}/crosslinks/{id}
                method: DELETE
                cors: true
    setCrosslinkVote:
        handler: dist/src/components/crosslink/routes.setVote
        events:
            - http:
                path: ${self:custom.versions.v1}/crosslinks/{id}/vote
                method: PUT
                cors: true
    resetCrosslinkVote:
        handler: dist/src/components/crosslink/routes.resetVote
        events:
            - http:
                path: ${self:custom.versions.v1}/crosslinks/{id}/vote
                method: DELETE
                cors: true
    getCrosslinkVote:
        handler: dist/src/components/crosslink/routes.getVote
        events:
            - http:
                path: ${self:custom.versions.v1}/crosslinks/{id}/vote
                method: GET
                cors: true
    getCrosslink:
        handler: dist/src/components/crosslink/routes.get
        events:
            - http:
                path: ${self:custom.versions.v1}/crosslinks/{id} # "id" can be the crosslink ID or a pair of publication IDs for this endpoint
                method: GET
                cors: true
    getPublicationCrosslinks:
        handler: dist/src/components/crosslink/routes.getPublicationCrosslinks
        events:
            - http:
                path: ${self:custom.versions.v1}/publications/{publicationId}/crosslinks
                method: GET
                cors: true
    # Integrations
    triggerARIIngest:
        handler: dist/src/components/integration/routes.triggerAriIngest
        events:
            - http:
                path: ${self:custom.versions.v1}/integrations/ari/incremental
                method: POST
                cors: true
    triggerARIArchivedCheck:
        handler: dist/src/components/integration/routes.triggerAriArchivedCheck
        events:
            - http:
                path: ${self:custom.versions.v1}/integrations/ari/archived-check
                method: POST
                cors: true
    # Publication bundles
    createPublicationBundle:
        handler: dist/src/components/publicationBundle/routes.create
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-bundles
                method: POST
                cors: true
    editPublicationBundle:
        handler: dist/src/components/publicationBundle/routes.edit
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-bundles/{publicationBundleId}
                method: PATCH
                cors: true
    deletePublicationBundle:
        handler: dist/src/components/publicationBundle/routes.deletePublicationBundle
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-bundles/{publicationBundleId}
                method: DELETE
                cors: true
    getPublicationBundle:
        handler: dist/src/components/publicationBundle/routes.get
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-bundles/{publicationBundleId}
                method: GET
                cors: true
    getPublicationBundlesByUser:
        handler: dist/src/components/publicationBundle/routes.getByUser
        events:
            - http:
                path: ${self:custom.versions.v1}/publication-bundles
                method: GET
                cors: true

package:
    defaultPatterns:
        - '!.eslintrc.json'
        - '!.localstack/**'
        - '!.prettierrc.json'
        - '!.swcrc'
        - '!.vscode/**'
        - '!Dockerfile'
        - '!README.md'
        - '!coverage/**'
        - '!docker-compose.yml'
        - '!docs/**'
        - '!doi_example.json'
        - '!jest*'
        - '!lib/**'
        - '!node_modules/.prisma/client/libquery_engine-*'
        - '!node_modules/@aws-sdk/**'
        - '!node_modules/@prisma/client/runtime/*.wasm'
        - '!node_modules/@prisma/engines/**'
        - '!node_modules/@sparticuz/chromium/**'
        - '!node_modules/@smithy/**'
        - '!node_modules/@swc/**'
        - '!node_modules/aws-sdk/**'
        - '!node_modules/chromium-bidi/**'
        - '!node_modules/prisma/engines/**'
        - '!node_modules/prisma/libquery_engine-*'
        - '!node_modules/puppeteer-core/**'
        - '!node_modules/typescript/**'
        - '!prisma/**'
        - '!scripts/**'
        - '!serverless*'
        - '!src/**'
        - '!tsconfig*'
    # Inclusions.
        - 'node_modules/.prisma/client/libquery_engine-linux-arm64-*'

    # Mostly as above but:
    # - With a different prisma engine (due to different architecture - chromium binary doesn't work on arm64)
    # - Included chromium binary
    pdfFunctionPatterns:
        - '!.eslintrc.json'
        - '!.localstack/**'
        - '!.prettierrc.json'
        - '!.swcrc'
        - '!.vscode/**'
        - '!Dockerfile'
        - '!README.md'
        - '!coverage/**'
        - '!docker-compose.yml'
        - '!docs/**'
        - '!doi_example.json'
        - '!jest*'
        - '!lib/**'
        - '!node_modules/.prisma/client/libquery_engine-*'
        - '!node_modules/@aws-sdk/**'
        - '!node_modules/@prisma/client/runtime/*.wasm'
        - '!node_modules/@prisma/engines/**'
        - '!node_modules/@sparticuz/chromium/**'
        - '!node_modules/@smithy/**'
        - '!node_modules/@swc/**'
        - '!node_modules/aws-sdk/**'
        - '!node_modules/chromium-bidi/**'
        - '!node_modules/prisma/engines/**'
        - '!node_modules/prisma/libquery_engine-*'
        - '!node_modules/puppeteer-core/**'
        - '!node_modules/typescript/**'
        - '!prisma/**'
        - '!scripts/**'
        - '!serverless*'
        - '!src/**'
        - '!tsconfig*'
        # Inclusions.
        - 'node_modules/@sparticuz/chromium/**'
        - 'node_modules/.prisma/client/libquery_engine-rhel-*'
        - 'node_modules/chromium-bidi/**'
        - 'node_modules/puppeteer-core/**'
