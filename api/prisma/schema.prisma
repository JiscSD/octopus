generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
    binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                   String                 @id @default(cuid())
    orcid                String                 @unique
    firstName            String
    lastName             String?
    email                String?
    role                 Role                   @default(USER)
    locked               Boolean                @default(false)
    apiKey               String                 @unique @default(uuid())
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    employment           Json[]
    works                Json[]
    education            Json[]
    coAuthors            CoAuthors[]
    Publication          Publication[]
    PublicationFlags     PublicationFlags[]
    flagComments         FlagComments[]
    Images               Images[]
    PublicationBookmarks PublicationBookmarks[]
}

model Verification {
    id        String   @id @default(cuid())
    orcid     String   @unique
    code      String
    email     String
    attempts  Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Images {
    id         String         @id @default(cuid())
    name       String
    user       String
    extension  ImageExtension
    uploadedBy User           @relation(fields: [user], references: [id], onDelete: Cascade)
    createdAt  DateTime       @default(now())
}

model Publication {
    id                                 String                 @id @default(cuid())
    url_slug                           String                 @unique @default(cuid())
    type                               PublicationType
    title                              String?
    licence                            LicenceType            @default(CC_BY)
    conflictOfInterestStatus           Boolean?
    conflictOfInterestText             String?
    ethicalStatement                   String?
    ethicalStatementFreeText           String?
    dataPermissionsStatement           String?
    dataPermissionsStatementProvidedBy String?
    dataAccessStatement                String?
    selfDeclaration                    Boolean?               @default(false)
    description                        String?
    keywords                           String[]
    content                            String?
    doi                                String
    language                           Languages              @default(en)
    publishedDate                      DateTime?
    currentStatus                      PublicationStatusEnum  @default(DRAFT)
    createdBy                          String
    createdAt                          DateTime               @default(now())
    updatedAt                          DateTime               @updatedAt
    user                               User                   @relation(fields: [createdBy], references: [id], onDelete: Cascade)
    coAuthors                          CoAuthors[]
    linkedTo                           Links[]                @relation("from")
    linkedFrom                         Links[]                @relation("to")
    publicationFlags                   PublicationFlags[]
    publicationStatus                  PublicationStatus[]
    PublicationBookmarks               PublicationBookmarks[]
    funders                            Funders[]
    fundersStatement                   String?
    affiliations                       Affiliations[]
    affiliationStatement               String?
}

model Funders {
    id            String  @id @default(cuid())
    name          String
    country       String
    city          String
    link          String
    ror           String?
    publicationId String

    publication Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
    createdAt   DateTime    @default(now())
}

model Affiliations {
    id            String  @id @default(cuid())
    name          String
    country       String
    city          String
    link          String
    ror           String?
    publicationId String

    publication Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
    createdAt   DateTime    @default(now())
}

model Links {
    id                 String      @id @default(cuid())
    publicationFrom    String
    publicationTo      String
    createdAt          DateTime    @default(now())
    updatedAt          DateTime    @updatedAt
    publicationFromRef Publication @relation("from", fields: [publicationFrom], references: [id], onDelete: Cascade)
    publicationToRef   Publication @relation("to", fields: [publicationTo], references: [id], onDelete: Cascade)

    @@unique([publicationFrom, publicationTo])
}

model PublicationStatus {
    id            String                @id @default(cuid())
    publicationId String
    status        PublicationStatusEnum
    createdAt     DateTime              @default(now())
    publication   Publication           @relation(fields: [publicationId], references: [id], onDelete: Cascade)
}

model CoAuthors {
    id                String      @id @default(cuid())
    publicationId     String
    email             String
    code              String      @default(cuid())
    confirmedCoAuthor Boolean     @default(false)
    linkedUser        String?
    user              User?       @relation(fields: [linkedUser], references: [id])
    publication       Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)

    @@unique([publicationId, email])
}

model PublicationFlags {
    id            String                      @id @default(cuid())
    publicationId String
    category      PublicationFlagCategoryEnum
    resolved      Boolean                     @default(false)
    createdBy     String
    createdAt     DateTime                    @default(now())
    user          User                        @relation(fields: [createdBy], references: [id], onDelete: Cascade)
    publication   Publication                 @relation(fields: [publicationId], references: [id], onDelete: Cascade)
    flagComments  FlagComments[]
}

model FlagComments {
    id        String           @id @default(cuid())
    flagId    String
    comment   String
    createdBy String
    createdAt DateTime         @default(now())
    user      User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
    flag      PublicationFlags @relation(fields: [flagId], references: [id], onDelete: Cascade)
}

model PublicationBookmarks {
    id            String      @id @default(cuid())
    publicationId String
    userId        String
    createdAt     DateTime    @default(now())
    publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([publicationId, userId])
}

enum ImageExtension {
    png
    jpg
    jpeg
}

enum Role {
    SUPER_USER
    FUNDER
    USER
}

enum PublicationStatusEnum {
    DRAFT
    LIVE
    HIDDEN
}

enum PublicationType {
    PROBLEM
    PROTOCOL
    ANALYSIS
    REAL_WORLD_APPLICATION
    HYPOTHESIS
    DATA
    INTERPRETATION
    PEER_REVIEW
}

enum PublicationFlagCategoryEnum {
    PLAGIARISM
    ETHICAL_ISSUES
    MISREPRESENTATION
    UNDECLARED_IMAGE_MANIPULATION
    COPYRIGHT
    INAPPROPRIATE
}

enum LicenceType {
    CC_BY
    CC_BY_SA
    CC_BY_NC
    CC_BY_NC_SA
}

enum Languages {
    ab
    aa
    af
    ak
    sq
    am
    ar
    an
    hy
    as
    av
    ae
    ay
    az
    bm
    ba
    eu
    be
    bn
    bi
    bs
    br
    bg
    bh
    my
    ca
    km
    ch
    ce
    ny
    zh
    cu
    cv
    kw
    co
    cr
    hr
    cs
    da
    dv
    nl
    dz
    en
    eo
    et
    ee
    fo
    fj
    fi
    fr
    ff
    gd
    gl
    lg
    ka
    de
    el
    gn
    gu
    ht
    ha
    he
    hz
    hi
    ho
    hu
    is
    io
    ig
    id
    ia
    ie
    iu
    ik
    ga
    it
    ja
    jv
    kl
    kn
    kr
    ks
    kk
    ki
    rw
    ky
    kv
    kg
    ko
    kj
    ku
    lo
    la
    lv
    li
    ln
    lt
    lu
    lb
    mk
    mg
    ms
    ml
    mt
    gv
    mi
    mr
    mh
    mn
    na
    nv
    ng
    ne
    nd
    se
    no
    nb
    nn
    oc
    oj
    or
    om
    os
    pi
    ps
    fa
    pl
    pt
    pa
    qu
    ro
    rm
    rn
    ru
    sm
    sg
    sa
    sc
    sr
    sn
    ii
    sd
    si
    sk
    sl
    so
    nr
    st
    es
    su
    sw
    ss
    sv
    tl
    ty
    tg
    ta
    tt
    te
    th
    bo
    ti
    to
    ts
    tn
    tr
    tk
    tw
    ug
    uk
    ur
    uz
    ve
    vi
    vo
    wa
    cy
    fy
    wo
    xh
    yi
    yo
    za
    zu
}
