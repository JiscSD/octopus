service: octopus-api

frameworkVersion: '3'

useDotenv: true

plugins:
    - serverless-offline-ssm
    - serverless-offline
    - serverless-domain-manager
    - serverless-webpack
    - serverless-webpack-prisma
    - serverless-prune-plugin

provider:
    name: aws
    timeout: 30
    runtime: nodejs14.x
    region: eu-west-1
    stage: ${opt:stage, 'local'}
    vpc:
        securityGroupIds:
            - ${ssm:/${self:provider.stage}_octopus_sls_sg}
        subnetIds:
            - ${ssm:/${self:provider.stage}_octopus_private_subnet_az1}
            - ${ssm:/${self:provider.stage}_octopus_private_subnet_az2}
            - ${ssm:/${self:provider.stage}_octopus_private_subnet_az3}
    environment:
        STAGE: ${self:provider.stage}
        ELASTICSEARCH_USER: ${ssm:/elasticsearch_user_${self:provider.stage}_octopus}
        ELASTICSEARCH_PASSWORD: ${ssm:/elasticsearch_password_${self:provider.stage}_octopus}
        ELASTICSEARCH_ENDPOINT: ${ssm:/elasticsearch_endpoint_${self:provider.stage}_octopus}
        ELASTICSEARCH_PROTOCOL: ${ssm:/elastic_search_protocol_${self:provider.stage}_octopus}
        DATABASE_URL: ${ssm:/db_connection_string_${self:provider.stage}_octopus}
        JWT_SECRET: ${ssm:/jwt_secret_${self:provider.stage}_octopus}
        VALIDATION_CODE_EXPIRY: 10
        VALIDATION_CODE_ATTEMPTS: 3
        ORCID_ID: ${ssm:/orcid_app_id_${self:provider.stage}_octopus}
        ORCID_SECRET: ${ssm:/orcid_secret_key_${self:provider.stage}_octopus}
        ORCID_AUTH_URL: ${ssm:/orcid_auth_url_${self:provider.stage}_octopus}
        ORCID_MEMBER_API_URL: ${ssm:/orcid_member_api_url_${self:provider.stage}_octopus}
        DOI_PREFIX: ${ssm:/doi_prefix_${self:provider.stage}_octopus}
        DATACITE_ENDPOINT: ${ssm:/datacite_endpoint_${self:provider.stage}_octopus}
        DATACITE_USER: ${ssm:/datacite_user_${self:provider.stage}_octopus}
        DATACITE_PASSWORD: ${ssm:/datacite_password_${self:provider.stage}_octopus}
        EMAIL_SENDER_ADDRESS: ${ssm:/email_sender_address_${self:provider.stage}_octopus}
        BASE_URL: ${ssm:/base_url_${self:provider.stage}_octopus}
        AUTHORISATION_CALLBACK_URL: ${ssm:/authorization_callback_url_${self:provider.stage}_octopus}
    deploymentBucket:
        tags:
            Project: Octopus
            Owner: 0 - 3 Years Innovation Team
            Name: Octopus API
    iamRoleStatements:
        - Effect: 'Allow'
          Action:
              - 'lambda:InvokeFunction'
              - 'ses:SendEmail'
              - 'ses:SendRawEmail'
          Resource: '*'
        - Effect: 'Allow'
          Resource: 'arn:aws:s3:::science-octopus-publishing-images-${self:provider.stage}/*'
          Action: 's3:PutObject'
custom:
    customDomain:
        domainName: '${self:provider.stage}.api.octopus.ac'
        basePath: ''
        hostedZoneId: Z0024644REA9FF3O23MK
        certificateName: '*.api.octopus.ac'
        stage: ${self:provider.stage}
        createRoute53Record: true
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules: true
        packager: 'npm'
    versions:
        v1: v1
    serverless-offline:
        useChildProcesses: true
    warmup:
        default:
            enabled: true
    serverless-offline-ssm:
        stages:
            - local
        ssm:
            /local_octopus_sls_sg: '1'
            /local_octopus_private_subnet_az1: '1'
            /local_octopus_private_subnet_az2: '2'
            /local_octopus_private_subnet_az3: '3'
            /elasticsearch_user_local_octopus: ${env:ELASTICSEARCH_USER}
            /elasticsearch_password_local_octopus: ${env:ELASTICSEARCH_PASSWORD}
            /elasticsearch_endpoint_local_octopus: ${env:ELASTICSEARCH_ENDPOINT}
            /elastic_search_protocol_local_octopus: ${env:ELASTICSEARCH_PROTOCOL}
            /db_connection_string_local_octopus: ${env:DATABASE_URL}
            /jwt_secret_local_octopus: ${env:JWT_SECRET}
            /orcid_secret_key_local_octopus: ${env:ORCID_SECRET}
            /orcid_app_id_local_octopus: ${env:ORCID_ID}
            /orcid_auth_url_local_octopus: ${env:ORCID_AUTH_URL}
            /orcid_member_api_url_local_octopus: ${env:ORCID_MEMBER_API_URL}
            /doi_prefix_local_octopus: ${env:DOI_PREFIX}
            /datacite_endpoint_local_octopus: ${env:DATACITE_ENDPOINT}
            /datacite_user_local_octopus: ${env:DATACITE_USER}
            /datacite_password_local_octopus: ${env:DATACITE_PASSWORD}
            /email_sender_address_local_octopus: ${env:EMAIL_SENDER_ADDRESS}
            /base_url_local_octopus: ${env:BASE_URL}
            /authorization_callback_url_local_octopus: ${env:AUTHORISATION_CALLBACK_URL}
    prune:
        automatic: true
        number: 3
functions:
    # App
    healthcheck:
        handler: src/components/application/routes.healthcheck
        events:
            - http:
                  path: ${self:custom.versions.v1}/healthcheck
                  method: GET
                  cors: true
    seedOpenSearch:
        handler: src/lib/testUtils.openSearchSeed
    # Publications
    getPublications:
        handler: src/components/publication/routes.getAll
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications
                  method: GET
                  cors: true
    getPublication:
        handler: src/components/publication/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}
                  method: GET
                  cors: true
    getSeedDataPublications:
        handler: src/components/publication/routes.getSeedDataPublications
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/seed-data-publications
                  method: GET
                  cors: true
    createPublication:
        handler: src/components/publication/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications
                  method: POST
                  cors: true
    updateStatus:
        handler: src/components/publication/routes.updateStatus
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/status/{status}
                  method: PUT
                  cors: true
    updatePublication:
        handler: src/components/publication/routes.update
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}
                  method: PATCH
                  cors: true
    deletePublication:
        handler: src/components/publication/routes.deletePublication
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}
                  method: DELETE
                  cors: true
    getPublicationLinks:
        handler: src/components/publication/routes.getPublicationLinks
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/links
                  method: GET
                  cors: true
    getPDF:
        handler: src/components/publication/routes.getPDF
        memorySize: 2048 # https://github.com/alixaxel/chrome-aws-lambda#:~:text=You%20should%20allocate%20at%20least%20512%20MB%20of%20RAM%20to%20your%20Lambda%2C%20however%201600%20MB%20(or%20more)%20is%20recommended
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/pdf
                  method: GET
                  cors: true
    # Users
    getUsers:
        handler: src/components/user/routes.getAll
        events:
            - http:
                  path: ${self:custom.versions.v1}/users
                  method: GET
                  cors: true
    getUser:
        handler: src/components/user/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/users/{id}
                  method: GET
                  cors: true
    getUserPublications:
        handler: src/components/user/routes.getPublications
        events:
            - http:
                  path: ${self:custom.versions.v1}/users/{id}/publications
                  method: GET
                  cors: true
    # Auth
    authorization:
        handler: src/components/authorization/routes.authorize
        events:
            - http:
                  path: ${self:custom.versions.v1}/authorization
                  method: POST
                  cors: true
    getDecodedUserToken:
        handler: src/components/authorization/routes.getDecodedUserToken
        events:
            - http:
                  path: ${self:custom.versions.v1}/decode-user-token
                  method: GET
                  cors: true
    verifyOrcidAccess:
        handler: src/components/authorization/routes.verifyOrcidAccess
        events:
            - http:
                  path: ${self:custom.versions.v1}/verify-orcid-access
                  method: GET
                  cors: true
    revokeOrcidAccess:
        handler: src/components/authorization/routes.revokeOrcidAccess
        events:
            - http:
                  path: ${self:custom.versions.v1}/revoke-orcid-access
                  method: DELETE
                  cors: true
    # Links
    createLink:
        handler: src/components/link/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/links
                  method: POST
                  cors: true
    deleteLink:
        handler: src/components/link/routes.deleteLink
        events:
            - http:
                  path: ${self:custom.versions.v1}/links/{id}
                  method: DELETE
                  cors: true
    # CoAuthors
    getCoAuthors:
        handler: src/components/coauthor/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/coauthors
                  method: GET
                  cors: true
    updateAll:
        handler: src/components/coauthor/routes.updateAll
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/coauthors
                  method: PUT
                  cors: true
    deleteCoAuthor:
        handler: src/components/coauthor/routes.remove
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/coauthors/{coauthor}
                  method: DELETE
                  cors: true
    linkCoAuthor:
        handler: src/components/coauthor/routes.link
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/link-coauthor
                  method: PATCH
                  cors: true
    updateCoAuthorConfirmation:
        handler: src/components/coauthor/routes.updateConfirmation
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/coauthor-confirmation
                  method: PATCH
                  cors: true
    requestApproval:
        handler: src/components/coauthor/routes.requestApproval
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/coauthors/request-approval
                  method: PUT
                  cors: true
    sendApprovalReminder:
        handler: src/components/coauthor/routes.sendApprovalReminder
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/coauthors/{coauthor}/approval-reminder
                  method: POST
                  cors: true
    getFlag:
        handler: src/components/flag/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/{id}
                  method: GET
                  cors: true
    createFlag:
        handler: src/components/flag/routes.createFlag
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/flag
                  method: POST
                  cors: true
    createFlagComment:
        handler: src/components/flag/routes.createFlagComment
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/{id}/comment
                  method: POST
                  cors: true
    resolveFlag:
        handler: src/components/flag/routes.resolveFlag
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/{id}/resolve
                  method: POST
                  cors: true
    getPublicationFlags:
        handler: src/components/flag/routes.getPublicationFlags
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/publication/{id}
                  method: GET
                  cors: true
    getUserFlags:
        handler: src/components/flag/routes.getUserFlags
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/user/{id}
                  method: GET
                  cors: true
    # Images
    createImage:
        handler: src/components/image/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/images
                  method: POST
                  cors: true
    deleteImage:
        handler: src/components/image/routes.destroy
        events:
            - http:
                  path: ${self:custom.versions.v1}/images/{id}
                  method: DELETE
                  cors: true
    getAllImages:
        handler: src/components/image/routes.getAll
        events:
            - http:
                  path: ${self:custom.versions.v1}/images
                  method: GET
                  cors: true
    # Bookmarks
    createBookmark:
        handler: src/components/bookmark/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/bookmark
                  method: POST
                  cors: true
    removeBookmark:
        handler: src/components/bookmark/routes.remove
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/bookmark
                  method: DELETE
                  cors: true
    getBookmark:
        handler: src/components/bookmark/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/bookmark
                  method: GET
                  cors: true
    getAllBookmark:
        handler: src/components/bookmark/routes.getAll
        events:
            - http:
                  path: ${self:custom.versions.v1}/bookmarks
                  method: GET
                  cors: true
    # Verification
    requestVerification:
        handler: src/components/verification/routes.requestCode
        warmup: true
        events:
            - http:
                  path: ${self:custom.versions.v1}/verification/{id}
                  method: GET
                  cors: true
    confirmVerification:
        handler: src/components/verification/routes.confirmCode
        warmup: true
        events:
            - http:
                  path: ${self:custom.versions.v1}/verification/{id}
                  method: POST
                  cors: true
    createFunder:
        handler: src/components/funder/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/funders
                  method: POST
                  cors: true
    deleteFunder:
        handler: src/components/funder/routes.destroy
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/funders/{funder}
                  method: DELETE
                  cors: true
    # References
    getReferences:
        handler: src/components/reference/routes.get
        warmup: true
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/reference
                  method: get
                  cors: true
    updateAllReference:
        handler: src/components/reference/routes.updateAll
        warmup: true
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/reference
                  method: put
                  cors: true
    # Affiliations
    createAffiliation:
        handler: src/components/affiliations/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/affiliation
                  method: POST
                  cors: true
    deleteAffiliation:
        handler: src/components/affiliations/routes.destroy
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/affiliation/{affiliation}
                  method: DELETE
                  cors: true
