service: octopus-api

plugins:
    - serverless-domain-manager
    - serverless-webpack
    - serverless-offline
    - serverless-pseudo-parameters
    - serverless-dotenv-plugin
    - serverless-webpack-prisma

provider:
    name: aws
    timeout: 30
    runtime: nodejs14.x
    region: eu-west-1
    stage: ${opt:stage, 'local'}
    vpc:
        securityGroupIds:
            - ${ssm:/${self:provider.stage}_octopus_sls_sg}
        subnetIds:
            - ${ssm:/${self:provider.stage}_octopus_private_subnet_az1}
            - ${ssm:/${self:provider.stage}_octopus_private_subnet_az2}
            - ${ssm:/${self:provider.stage}_octopus_private_subnet_az3}
    environment:
        STAGE: ${self:provider.stage}
        ELASTICSEARCH_USER: ${ssm:/elasticsearch_user_${self:provider.stage}_octopus}
        ELASTICSEARCH_PASSWORD: ${ssm:/elasticsearch_password_${self:provider.stage}_octopus}
        ELASTICSEARCH_ENDPOINT: ${ssm:/elasticsearch_endpoint_${self:provider.stage}_octopus}
    deploymentBucket:
        tags:
            Project: Octopus
            Owner: 0 - 3 Years Innovation Team
            Name: Octopus API
    iamRoleStatements:
        - Effect: 'Allow'
          Action:
              - 'lambda:InvokeFunction'
              - 'ses:SendEmail'
              - 'ses:SendRawEmail'
          Resource: '*'
        - Effect: 'Allow'
          Resource: 'arn:aws:s3:::science-octopus-publishing-images-${self:provider.stage}/*'
          Action: 's3:PutObject'
custom:
    customDomain:
        domainName: '${self:provider.stage}.api.octopus.ac'
        basePath: ''
        hostedZoneId: Z0024644REA9FF3O23MK
        certificateName: '*.api.octopus.ac'
        stage: ${self:provider.stage}
        createRoute53Record: true
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules: true
        packager: 'npm'
    versions:
        v1: v1
    serverless-offline:
        useChildProcesses: true
    warmup:
        default:
            enabled: true
functions:
    # App
    healthcheck:
        handler: src/components/application/routes.healthcheck
        events:
            - http:
                  path: ${self:custom.versions.v1}/healthcheck
                  method: get
                  cors: true
    seedOpenSearch:
        handler: src/lib/testUtils.openSearchSeed
    # Publications
    getPublications:
        handler: src/components/publication/routes.getAll
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications
                  method: get
                  cors: true
    getPublication:
        handler: src/components/publication/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}
                  method: get
                  cors: true
    createPublication:
        handler: src/components/publication/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications
                  method: post
                  cors: true
    updateStatus:
        handler: src/components/publication/routes.updateStatus
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/status/{status}
                  method: put
                  cors: true
    updatePublication:
        handler: src/components/publication/routes.update
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}
                  method: patch
                  cors: true
    deletePublication:
        handler: src/components/publication/routes.deletePublication
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}
                  method: delete
                  cors: true
    getPublicationLinks:
        handler: src/components/publication/routes.getPublicationLinks
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/links
                  method: get
                  cors: true
    # Users
    getUsers:
        handler: src/components/user/routes.getAll
        events:
            - http:
                  path: ${self:custom.versions.v1}/users
                  method: get
                  cors: true
    getUser:
        handler: src/components/user/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/users/{id}
                  method: get
                  cors: true
    # Auth
    authorization:
        handler: src/components/authorization/routes.authorize
        events:
            - http:
                  path: ${self:custom.versions.v1}/authorization
                  method: post
                  cors: true
    getUserPublications:
        handler: src/components/user/routes.getPublications
        events:
            - http:
                  path: ${self:custom.versions.v1}/users/{id}/publications
                  method: get
                  cors: true
    # Links
    createLink:
        handler: src/components/link/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/links
                  method: post
                  cors: true
    deleteLink:
        handler: src/components/link/routes.deleteLink
        events:
            - http:
                  path: ${self:custom.versions.v1}/links/{id}
                  method: delete
                  cors: true
    # CoAuthors
    createCoAuthor:
        handler: src/components/coauthor/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/coauthor
                  method: post
                  cors: true
    deleteCoAuthor:
        handler: src/components/coauthor/routes.remove
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/coauthor/{coauthor}
                  method: delete
                  cors: true
    linkCoAuthor:
        handler: src/components/coauthor/routes.link
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/link-coauthor
                  method: patch
                  cors: true
    updateCoAuthor:
        handler: src/components/coauthor/routes.update
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/coauthor
                  method: patch
                  cors: true
    # Ratings
    createRatings:
        handler: src/components/rating/routes.upsert
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/ratings
                  method: post
                  cors: true
    getRatings:
        handler: src/components/rating/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/ratings
                  method: get
                  cors: true
    # Flags
    getFlag:
        handler: src/components/flag/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/{id}
                  method: get
                  cors: true
    createFlag:
        handler: src/components/flag/routes.createFlag
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/flag
                  method: post
                  cors: true
    createFlagComment:
        handler: src/components/flag/routes.createFlagComment
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/{id}/comment
                  method: post
                  cors: true
    resolveFlag:
        handler: src/components/flag/routes.resolveFlag
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/{id}/resolve
                  method: post
                  cors: true
    getPublicationFlags:
        handler: src/components/flag/routes.getPublicationFlags
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/publication/{id}
                  method: get
                  cors: true
    getUserFlags:
        handler: src/components/flag/routes.getUserFlags
        events:
            - http:
                  path: ${self:custom.versions.v1}/flag/user/{id}
                  method: get
                  cors: true
    # Images
    createImage:
        handler: src/components/image/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/images
                  method: post
                  cors: true
    deleteImage:
        handler: src/components/image/routes.destroy
        events:
            - http:
                  path: ${self:custom.versions.v1}/images/{id}
                  method: delete
                  cors: true
    getAllImages:
        handler: src/components/image/routes.getAll
        events:
            - http:
                  path: ${self:custom.versions.v1}/images
                  method: get
                  cors: true
    # Bookmarks
    createBookmark:
        handler: src/components/bookmark/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/bookmark
                  method: post
                  cors: true
    removeBookmark:
        handler: src/components/bookmark/routes.remove
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/bookmark
                  method: delete
                  cors: true
    getBookmark:
        handler: src/components/bookmark/routes.get
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/bookmark
                  method: get
                  cors: true
    getAllBookmark:
        handler: src/components/bookmark/routes.getAll
        events:
            - http:
                  path: ${self:custom.versions.v1}/bookmarks
                  method: get
                  cors: true
    # Verification
    requestVerification:
        handler: src/components/verification/routes.requestCode
        warmup: true
        events:
            - http:
                  path: ${self:custom.versions.v1}/verification/{id}
                  method: get
                  cors: true
    confirmVerification:
        handler: src/components/verification/routes.confirmCode
        warmup: true
        events:
            - http:
                  path: ${self:custom.versions.v1}/verification/{id}
                  method: post
                  cors: true
    createFunder:
        handler: src/components/funder/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/funders
                  method: post
                  cors: true
    deleteFunder:
        handler: src/components/funder/routes.destroy
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/funders/{funder}
                  method: delete
                  cors: true
    createAffiliation:
        handler: src/components/affiliations/routes.create
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/affiliation
                  method: post
                  cors: true
    deleteAffiliation:
        handler: src/components/affiliations/routes.destroy
        events:
            - http:
                  path: ${self:custom.versions.v1}/publications/{id}/affiliation/{affiliation}
                  method: delete
                  cors: true
